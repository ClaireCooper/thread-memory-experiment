plugins {
    id 'java'
    id 'application'
    id 'com.bmuschko.docker-remote-api' version '6.7.0'
}
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*
import com.github.dockerjava.api.exception.NotModifiedException

application {
    group = 'net.portswigger.academy'
    version = '1.0-SNAPSHOT'
    mainClassName = 'net.portswigger.academy.ThreadPoolExperiment'
}
def ourContainerName = "thread-pool-experiment-gradle-docker-container"
repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': 'net.portswigger.academy.ThreadPoolExperiment'
    }
    archiveBaseName = 'threadMemoryExperiment'
    archiveVersion =  '1.0-SNAPSHOT'
}

tasks.register('createDockerFile', Dockerfile) {
    from 'amazoncorretto:17-alpine'//'openjdk:17'//-jre-alpine'
    copyFile jar.archiveFileName.get(), '/net/portswigger/academy/ThreadMemoryExperiment.jar'
    entryPoint 'java'
    defaultCommand '-jar', '/net/portswigger/academy/ThreadMemoryExperiment.jar'
    environmentVariable '_JAVA_OPTIONS', '-Xms100m -Xmx1024m -Xss1m -XX:+UseZGC'
}


tasks.register('syncJar', Copy) {
    dependsOn assemble
    from jar.destinationDirectory
    into "$buildDir/docker"
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.register('buildImage', DockerBuildImage) {
    dependsOn createDockerFile, syncJar
    inputDir = createDockerFile.getDestDir()
    images = ["clairecooper/thread-pool-experiment-gradle-docker:1.0"]
}

tasks.register('stopContainer', DockerStopContainer) {
    targetContainerId("$ourContainerName")
    onError { exception ->
        if (exception instanceof NotModifiedException) {
            println 'Container not running'
        } else if (exception.message != null && exception.message.contains('No such container')) {
            println 'Container not running'
        } else {
            throw exception
        }
    }
}

tasks.register('removeContainer', DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId("$ourContainerName")
    onError { exception -> handleError(exception) }
}

tasks.register('createContainer', DockerCreateContainer) {
    dependsOn buildImage, removeContainer
    targetImageId buildImage.getImageId()

    containerName = "$ourContainerName"
    hostConfig.memory = Integer.toUnsignedLong(1024 * 1024 * 1024);
    hostConfig.memorySwap = Integer.toUnsignedLong(1024 * 1024 * 1024);
}

tasks.register('startContainer', DockerStartContainer) {
    dependsOn createContainer
    targetContainerId("$ourContainerName")
}

private void handleError(Throwable exc) {
    if (exc.message != null &&
            !exc.message.contains('NotModifiedException') &&
            !exc.message.contains('No such container')) {
        throw new RuntimeException(exc)
    }
}